// Code generated by go-swagger; DO NOT EDIT.

package health

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery --name API --keeptree --with-expecter --case underscore

// API is the interface of the health client
type API interface {
	/*
	   HealthLiveness livenesses probe for kubernetes health check returns 200 if the service is alive

	   Liveness probe*/
	HealthLiveness(ctx context.Context, params *HealthLivenessParams) (*HealthLivenessOK, error)
	/*
	   HealthReadiness readinesses probe

	   Readiness probe for kubernetes health check. Returns 200 if the service is ready to serve requests.
	   Returns 503 if the service is not ready to serve requests (starting up or shutting down).
	*/
	HealthReadiness(ctx context.Context, params *HealthReadinessParams) (*HealthReadinessOK, error)
}

// New creates a new health API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for health API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
HealthLiveness livenesses probe for kubernetes health check returns 200 if the service is alive

Liveness probe
*/
func (a *Client) HealthLiveness(ctx context.Context, params *HealthLivenessParams) (*HealthLivenessOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HealthLiveness",
		Method:             "GET",
		PathPattern:        "/healthz/liveness",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HealthLivenessReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *HealthLivenessOK:
		return value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HealthLiveness: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HealthReadiness readinesses probe

Readiness probe for kubernetes health check. Returns 200 if the service is ready to serve requests.
Returns 503 if the service is not ready to serve requests (starting up or shutting down).
*/
func (a *Client) HealthReadiness(ctx context.Context, params *HealthReadinessParams) (*HealthReadinessOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HealthReadiness",
		Method:             "GET",
		PathPattern:        "/healthz/readiness",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HealthReadinessReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *HealthReadinessOK:
		return value, nil
	case *HealthReadinessServiceUnavailable:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HealthReadiness: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}
