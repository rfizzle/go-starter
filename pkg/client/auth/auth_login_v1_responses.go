// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	models "github.com/rfizzle/go-starter/pkg/schema"
)

// AuthLoginV1Reader is a Reader for the AuthLoginV1 structure.
type AuthLoginV1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthLoginV1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuthLoginV1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAuthLoginV1BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAuthLoginV1InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/auth/login] AuthLoginV1", response, response.Code())
	}
}

// NewAuthLoginV1OK creates a AuthLoginV1OK with default headers values
func NewAuthLoginV1OK() *AuthLoginV1OK {
	return &AuthLoginV1OK{}
}

/*
AuthLoginV1OK describes a response with status code 200, with default header values.

success
*/
type AuthLoginV1OK struct {
	Payload *models.LoginRequest
}

// IsSuccess returns true when this auth login v1 o k response has a 2xx status code
func (o *AuthLoginV1OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this auth login v1 o k response has a 3xx status code
func (o *AuthLoginV1OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth login v1 o k response has a 4xx status code
func (o *AuthLoginV1OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this auth login v1 o k response has a 5xx status code
func (o *AuthLoginV1OK) IsServerError() bool {
	return false
}

// IsCode returns true when this auth login v1 o k response a status code equal to that given
func (o *AuthLoginV1OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the auth login v1 o k response
func (o *AuthLoginV1OK) Code() int {
	return 200
}

func (o *AuthLoginV1OK) Error() string {
	return fmt.Sprintf("[POST /v1/auth/login][%d] authLoginV1OK  %+v", 200, o.Payload)
}

func (o *AuthLoginV1OK) String() string {
	return fmt.Sprintf("[POST /v1/auth/login][%d] authLoginV1OK  %+v", 200, o.Payload)
}

func (o *AuthLoginV1OK) GetPayload() *models.LoginRequest {
	return o.Payload
}

func (o *AuthLoginV1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LoginRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthLoginV1BadRequest creates a AuthLoginV1BadRequest with default headers values
func NewAuthLoginV1BadRequest() *AuthLoginV1BadRequest {
	return &AuthLoginV1BadRequest{}
}

/*
AuthLoginV1BadRequest describes a response with status code 400, with default header values.

Bad request
*/
type AuthLoginV1BadRequest struct {
	Payload *models.FailureResponse
}

// IsSuccess returns true when this auth login v1 bad request response has a 2xx status code
func (o *AuthLoginV1BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth login v1 bad request response has a 3xx status code
func (o *AuthLoginV1BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth login v1 bad request response has a 4xx status code
func (o *AuthLoginV1BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this auth login v1 bad request response has a 5xx status code
func (o *AuthLoginV1BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this auth login v1 bad request response a status code equal to that given
func (o *AuthLoginV1BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the auth login v1 bad request response
func (o *AuthLoginV1BadRequest) Code() int {
	return 400
}

func (o *AuthLoginV1BadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/auth/login][%d] authLoginV1BadRequest  %+v", 400, o.Payload)
}

func (o *AuthLoginV1BadRequest) String() string {
	return fmt.Sprintf("[POST /v1/auth/login][%d] authLoginV1BadRequest  %+v", 400, o.Payload)
}

func (o *AuthLoginV1BadRequest) GetPayload() *models.FailureResponse {
	return o.Payload
}

func (o *AuthLoginV1BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FailureResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthLoginV1InternalServerError creates a AuthLoginV1InternalServerError with default headers values
func NewAuthLoginV1InternalServerError() *AuthLoginV1InternalServerError {
	return &AuthLoginV1InternalServerError{}
}

/*
AuthLoginV1InternalServerError describes a response with status code 500, with default header values.

Server error
*/
type AuthLoginV1InternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this auth login v1 internal server error response has a 2xx status code
func (o *AuthLoginV1InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth login v1 internal server error response has a 3xx status code
func (o *AuthLoginV1InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth login v1 internal server error response has a 4xx status code
func (o *AuthLoginV1InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this auth login v1 internal server error response has a 5xx status code
func (o *AuthLoginV1InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this auth login v1 internal server error response a status code equal to that given
func (o *AuthLoginV1InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the auth login v1 internal server error response
func (o *AuthLoginV1InternalServerError) Code() int {
	return 500
}

func (o *AuthLoginV1InternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/auth/login][%d] authLoginV1InternalServerError  %+v", 500, o.Payload)
}

func (o *AuthLoginV1InternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/auth/login][%d] authLoginV1InternalServerError  %+v", 500, o.Payload)
}

func (o *AuthLoginV1InternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AuthLoginV1InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
