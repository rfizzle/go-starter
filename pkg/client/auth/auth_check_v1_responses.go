// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// AuthCheckV1Reader is a Reader for the AuthCheckV1 structure.
type AuthCheckV1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthCheckV1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuthCheckV1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAuthCheckV1Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/auth/check] AuthCheckV1", response, response.Code())
	}
}

// NewAuthCheckV1OK creates a AuthCheckV1OK with default headers values
func NewAuthCheckV1OK() *AuthCheckV1OK {
	return &AuthCheckV1OK{}
}

/*
AuthCheckV1OK describes a response with status code 200, with default header values.

success
*/
type AuthCheckV1OK struct {
}

// IsSuccess returns true when this auth check v1 o k response has a 2xx status code
func (o *AuthCheckV1OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this auth check v1 o k response has a 3xx status code
func (o *AuthCheckV1OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth check v1 o k response has a 4xx status code
func (o *AuthCheckV1OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this auth check v1 o k response has a 5xx status code
func (o *AuthCheckV1OK) IsServerError() bool {
	return false
}

// IsCode returns true when this auth check v1 o k response a status code equal to that given
func (o *AuthCheckV1OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the auth check v1 o k response
func (o *AuthCheckV1OK) Code() int {
	return 200
}

func (o *AuthCheckV1OK) Error() string {
	return fmt.Sprintf("[GET /v1/auth/check][%d] authCheckV1OK ", 200)
}

func (o *AuthCheckV1OK) String() string {
	return fmt.Sprintf("[GET /v1/auth/check][%d] authCheckV1OK ", 200)
}

func (o *AuthCheckV1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAuthCheckV1Unauthorized creates a AuthCheckV1Unauthorized with default headers values
func NewAuthCheckV1Unauthorized() *AuthCheckV1Unauthorized {
	return &AuthCheckV1Unauthorized{}
}

/*
AuthCheckV1Unauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type AuthCheckV1Unauthorized struct {
}

// IsSuccess returns true when this auth check v1 unauthorized response has a 2xx status code
func (o *AuthCheckV1Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth check v1 unauthorized response has a 3xx status code
func (o *AuthCheckV1Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth check v1 unauthorized response has a 4xx status code
func (o *AuthCheckV1Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this auth check v1 unauthorized response has a 5xx status code
func (o *AuthCheckV1Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this auth check v1 unauthorized response a status code equal to that given
func (o *AuthCheckV1Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the auth check v1 unauthorized response
func (o *AuthCheckV1Unauthorized) Code() int {
	return 401
}

func (o *AuthCheckV1Unauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/auth/check][%d] authCheckV1Unauthorized ", 401)
}

func (o *AuthCheckV1Unauthorized) String() string {
	return fmt.Sprintf("[GET /v1/auth/check][%d] authCheckV1Unauthorized ", 401)
}

func (o *AuthCheckV1Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
