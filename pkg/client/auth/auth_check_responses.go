// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// AuthCheckReader is a Reader for the AuthCheck structure.
type AuthCheckReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthCheckReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuthCheckOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAuthCheckUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/v1/auth/check] AuthCheck", response, response.Code())
	}
}

// NewAuthCheckOK creates a AuthCheckOK with default headers values
func NewAuthCheckOK() *AuthCheckOK {
	return &AuthCheckOK{}
}

/*
AuthCheckOK describes a response with status code 200, with default header values.

success
*/
type AuthCheckOK struct {
}

// IsSuccess returns true when this auth check o k response has a 2xx status code
func (o *AuthCheckOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this auth check o k response has a 3xx status code
func (o *AuthCheckOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth check o k response has a 4xx status code
func (o *AuthCheckOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this auth check o k response has a 5xx status code
func (o *AuthCheckOK) IsServerError() bool {
	return false
}

// IsCode returns true when this auth check o k response a status code equal to that given
func (o *AuthCheckOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the auth check o k response
func (o *AuthCheckOK) Code() int {
	return 200
}

func (o *AuthCheckOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/auth/check][%d] authCheckOK ", 200)
}

func (o *AuthCheckOK) String() string {
	return fmt.Sprintf("[GET /api/v1/auth/check][%d] authCheckOK ", 200)
}

func (o *AuthCheckOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAuthCheckUnauthorized creates a AuthCheckUnauthorized with default headers values
func NewAuthCheckUnauthorized() *AuthCheckUnauthorized {
	return &AuthCheckUnauthorized{}
}

/*
AuthCheckUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type AuthCheckUnauthorized struct {
}

// IsSuccess returns true when this auth check unauthorized response has a 2xx status code
func (o *AuthCheckUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth check unauthorized response has a 3xx status code
func (o *AuthCheckUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth check unauthorized response has a 4xx status code
func (o *AuthCheckUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this auth check unauthorized response has a 5xx status code
func (o *AuthCheckUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this auth check unauthorized response a status code equal to that given
func (o *AuthCheckUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the auth check unauthorized response
func (o *AuthCheckUnauthorized) Code() int {
	return 401
}

func (o *AuthCheckUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/auth/check][%d] authCheckUnauthorized ", 401)
}

func (o *AuthCheckUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v1/auth/check][%d] authCheckUnauthorized ", 401)
}

func (o *AuthCheckUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
