// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Application",
    "version": "0.2.0"
  },
  "basePath": "/api",
  "paths": {
    "/healthz/liveness": {
      "get": {
        "security": [
          {}
        ],
        "description": "Liveness probe",
        "tags": [
          "health"
        ],
        "summary": "Liveness probe for kubernetes health check. Returns 200 if the service is alive.",
        "operationId": "HealthLiveness",
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/healthz/readiness": {
      "get": {
        "security": [
          {}
        ],
        "description": "Readiness probe for kubernetes health check. Returns 200 if the service is ready to serve requests. \nReturns 503 if the service is not ready to serve requests (starting up or shutting down).\n",
        "tags": [
          "health"
        ],
        "summary": "Readiness probe",
        "operationId": "HealthReadiness",
        "responses": {
          "200": {
            "description": "success"
          },
          "503": {
            "description": "Not available",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/auth/check": {
      "get": {
        "security": [
          {
            "hasPermission": [
              "auth:check"
            ]
          }
        ],
        "description": "Check if the user is authenticated\n",
        "tags": [
          "auth"
        ],
        "summary": "Check if the user is authenticated",
        "operationId": "AuthCheckV1",
        "responses": {
          "200": {
            "description": "success"
          },
          "401": {
            "description": "unauthorized"
          }
        }
      }
    },
    "/v1/auth/login": {
      "post": {
        "security": [
          {}
        ],
        "description": "Authenticates a user from a username and password and returns a JWT in the response and inside a\nsigned cookie.\n",
        "tags": [
          "auth"
        ],
        "summary": "Login a user",
        "operationId": "AuthLoginV1",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/loginRequest"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/auth/logout": {
      "post": {
        "security": [
          {}
        ],
        "description": "Invalidates an authenticated user's session and cookie\n",
        "tags": [
          "auth"
        ],
        "summary": "Logout the current user",
        "operationId": "AuthLogoutV1",
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    }
  },
  "definitions": {
    "errorResponse": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "maximum": 599,
          "minimum": 100
        },
        "data": {
          "type": "object"
        },
        "message": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "error"
          ]
        }
      }
    },
    "failureResponse": {
      "type": "object",
      "required": [
        "status",
        "data"
      ],
      "properties": {
        "data": {
          "type": "object"
        },
        "status": {
          "type": "string",
          "enum": [
            "fail"
          ]
        }
      }
    },
    "loginRequest": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "description": "Email of user",
          "type": "string"
        },
        "password": {
          "description": "Password of user",
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "hasPermission": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://example.com",
      "tokenUrl": "https://example.com",
      "scopes": {
        "auth:check": "Check if the user is authenticated"
      }
    }
  },
  "security": [
    {
      "hasPermission": [
        "deny"
      ]
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Application",
    "version": "0.2.0"
  },
  "basePath": "/api",
  "paths": {
    "/healthz/liveness": {
      "get": {
        "security": [
          {}
        ],
        "description": "Liveness probe",
        "tags": [
          "health"
        ],
        "summary": "Liveness probe for kubernetes health check. Returns 200 if the service is alive.",
        "operationId": "HealthLiveness",
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/healthz/readiness": {
      "get": {
        "security": [
          {}
        ],
        "description": "Readiness probe for kubernetes health check. Returns 200 if the service is ready to serve requests. \nReturns 503 if the service is not ready to serve requests (starting up or shutting down).\n",
        "tags": [
          "health"
        ],
        "summary": "Readiness probe",
        "operationId": "HealthReadiness",
        "responses": {
          "200": {
            "description": "success"
          },
          "503": {
            "description": "Not available",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/auth/check": {
      "get": {
        "security": [
          {
            "hasPermission": [
              "auth:check"
            ]
          }
        ],
        "description": "Check if the user is authenticated\n",
        "tags": [
          "auth"
        ],
        "summary": "Check if the user is authenticated",
        "operationId": "AuthCheckV1",
        "responses": {
          "200": {
            "description": "success"
          },
          "401": {
            "description": "unauthorized"
          }
        }
      }
    },
    "/v1/auth/login": {
      "post": {
        "security": [
          {}
        ],
        "description": "Authenticates a user from a username and password and returns a JWT in the response and inside a\nsigned cookie.\n",
        "tags": [
          "auth"
        ],
        "summary": "Login a user",
        "operationId": "AuthLoginV1",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/loginRequest"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/auth/logout": {
      "post": {
        "security": [
          {}
        ],
        "description": "Invalidates an authenticated user's session and cookie\n",
        "tags": [
          "auth"
        ],
        "summary": "Logout the current user",
        "operationId": "AuthLogoutV1",
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    }
  },
  "definitions": {
    "errorResponse": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "maximum": 599,
          "minimum": 100
        },
        "data": {
          "type": "object"
        },
        "message": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "error"
          ]
        }
      }
    },
    "failureResponse": {
      "type": "object",
      "required": [
        "status",
        "data"
      ],
      "properties": {
        "data": {
          "type": "object"
        },
        "status": {
          "type": "string",
          "enum": [
            "fail"
          ]
        }
      }
    },
    "loginRequest": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "description": "Email of user",
          "type": "string"
        },
        "password": {
          "description": "Password of user",
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "hasPermission": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://example.com",
      "tokenUrl": "https://example.com",
      "scopes": {
        "auth:check": "Check if the user is authenticated"
      }
    }
  },
  "security": [
    {
      "hasPermission": [
        "deny"
      ]
    }
  ]
}`))
}
