// Code generated by go-swagger; DO NOT EDIT.

package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"

	"github.com/rfizzle/go-starter/internal/api/operations"
	"github.com/rfizzle/go-starter/internal/api/operations/auth"
	"github.com/rfizzle/go-starter/internal/api/operations/health"
	"github.com/rfizzle/go-starter/internal/entity"
)

type contextKey string

const AuthKey contextKey = "Auth"

//go:generate mockery -name AuthAPI -inpkg

/* AuthAPI  */
type AuthAPI interface {
	/* AuthCheck Check if the user is authenticated */
	AuthCheck(ctx context.Context, params auth.AuthCheckParams) middleware.Responder

	/* AuthLogin Login a user */
	AuthLogin(ctx context.Context, params auth.AuthLoginParams) middleware.Responder

	/* AuthLogout Logout the current user */
	AuthLogout(ctx context.Context, params auth.AuthLogoutParams) middleware.Responder
}

//go:generate mockery -name HealthAPI -inpkg

/* HealthAPI  */
type HealthAPI interface {
	/* HealthLiveness Liveness probe for kubernetes health check. Returns 200 if the service is alive. */
	HealthLiveness(ctx context.Context, params health.HealthLivenessParams) middleware.Responder

	/* HealthReadiness Readiness probe */
	HealthReadiness(ctx context.Context, params health.HealthReadinessParams) middleware.Responder
}

// Config is configuration for Handler
type Config struct {
	AuthAPI
	HealthAPI
	Logger func(string, ...interface{})
	// InnerMiddleware is for the handler executors. These do not apply to the swagger.json document.
	// The middleware executes after routing but before authentication, binding and validation
	InnerMiddleware func(http.Handler) http.Handler

	// Authorizer is used to authorize a request after the Auth function was called using the "Auth*" functions
	// and the principal was stored in the context in the "AuthKey" context value.
	Authorizer func(*http.Request) error

	// AuthHasPermission For OAuth2 authentication
	AuthHasPermission func(token string, scopes []string) (entity.Entity, error)
	// Authenticator to use for all APIKey authentication
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// Authenticator to use for all Bearer authentication
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// Authenticator to use for all Basic authentication
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer is a json consumer that will replace the default if not nil.
	JSONConsumer runtime.Consumer
}

// Handler returns an http.Handler given the handler configuration
// It mounts all the business logic implementers in the right routing.
func Handler(c Config) (http.Handler, error) {
	h, _, err := HandlerAPI(c)
	return h, err
}

// HandlerAPI returns an http.Handler given the handler configuration
// and the corresponding *Gostarter instance.
// It mounts all the business logic implementers in the right routing.
func HandlerAPI(c Config) (http.Handler, *operations.GostarterAPI, error) {
	spec, err := loads.Analyzed(swaggerCopy(SwaggerJSON), "")
	if err != nil {
		return nil, nil, fmt.Errorf("analyze swagger: %v", err)
	}
	api := operations.NewGostarterAPI(spec)
	api.ServeError = errors.ServeError
	api.Logger = c.Logger

	if c.APIKeyAuthenticator != nil {
		api.APIKeyAuthenticator = c.APIKeyAuthenticator
	}
	if c.BasicAuthenticator != nil {
		api.BasicAuthenticator = c.BasicAuthenticator
	}
	if c.BearerAuthenticator != nil {
		api.BearerAuthenticator = c.BearerAuthenticator
	}

	if c.JSONConsumer != nil {
		api.JSONConsumer = c.JSONConsumer
	} else {
		api.JSONConsumer = runtime.JSONConsumer()
	}
	api.JSONProducer = runtime.JSONProducer()

	api.HasPermissionAuth = func(token string, scopes []string) (entity.Entity, error) {
		if c.AuthHasPermission == nil {
			panic("you specified a custom principal type, but did not provide the authenticator to provide this")
		}
		return c.AuthHasPermission(token, scopes)
	}
	api.APIAuthorizer = authorizer(c.Authorizer)
	api.AuthAuthCheckHandler = auth.AuthCheckHandlerFunc(func(params auth.AuthCheckParams, principal entity.Entity) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.AuthAPI.AuthCheck(ctx, params)
	})
	api.AuthAuthLoginHandler = auth.AuthLoginHandlerFunc(func(params auth.AuthLoginParams, principal entity.Entity) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.AuthAPI.AuthLogin(ctx, params)
	})
	api.AuthAuthLogoutHandler = auth.AuthLogoutHandlerFunc(func(params auth.AuthLogoutParams, principal entity.Entity) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.AuthAPI.AuthLogout(ctx, params)
	})
	api.HealthHealthLivenessHandler = health.HealthLivenessHandlerFunc(func(params health.HealthLivenessParams, principal entity.Entity) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.HealthAPI.HealthLiveness(ctx, params)
	})
	api.HealthHealthReadinessHandler = health.HealthReadinessHandlerFunc(func(params health.HealthReadinessParams, principal entity.Entity) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.HealthAPI.HealthReadiness(ctx, params)
	})
	api.ServerShutdown = func() {}
	return api.Serve(c.InnerMiddleware), api, nil
}

// swaggerCopy copies the swagger json to prevent data races in runtime
func swaggerCopy(orig json.RawMessage) json.RawMessage {
	c := make(json.RawMessage, len(orig))
	copy(c, orig)
	return c
}

// authorizer is a helper function to implement the runtime.Authorizer interface.
type authorizer func(*http.Request) error

func (a authorizer) Authorize(req *http.Request, principal interface{}) error {
	if a == nil {
		return nil
	}
	ctx := storeAuth(req.Context(), principal)
	return a(req.WithContext(ctx))
}

func storeAuth(ctx context.Context, principal interface{}) context.Context {
	return context.WithValue(ctx, AuthKey, principal)
}
