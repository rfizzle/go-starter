// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/rfizzle/go-starter/internal/entity"
)

// AuthCheckV1HandlerFunc turns a function with the right signature into a auth check v1 handler
type AuthCheckV1HandlerFunc func(AuthCheckV1Params, entity.Entity) middleware.Responder

// Handle executing the request and returning a response
func (fn AuthCheckV1HandlerFunc) Handle(params AuthCheckV1Params, principal entity.Entity) middleware.Responder {
	return fn(params, principal)
}

// AuthCheckV1Handler interface for that can handle valid auth check v1 params
type AuthCheckV1Handler interface {
	Handle(AuthCheckV1Params, entity.Entity) middleware.Responder
}

// NewAuthCheckV1 creates a new http.Handler for the auth check v1 operation
func NewAuthCheckV1(ctx *middleware.Context, handler AuthCheckV1Handler) *AuthCheckV1 {
	return &AuthCheckV1{Context: ctx, Handler: handler}
}

/*
	AuthCheckV1 swagger:route GET /v1/auth/check auth authCheckV1

# Check if the user is authenticated

Check if the user is authenticated
*/
type AuthCheckV1 struct {
	Context *middleware.Context
	Handler AuthCheckV1Handler
}

func (o *AuthCheckV1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAuthCheckV1Params()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal entity.Entity
	if uprinc != nil {
		principal = uprinc.(entity.Entity) // this is really a entity.Entity, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
