// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AuthLogoutHandlerFunc turns a function with the right signature into a auth logout handler
type AuthLogoutHandlerFunc func(AuthLogoutParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AuthLogoutHandlerFunc) Handle(params AuthLogoutParams) middleware.Responder {
	return fn(params)
}

// AuthLogoutHandler interface for that can handle valid auth logout params
type AuthLogoutHandler interface {
	Handle(AuthLogoutParams) middleware.Responder
}

// NewAuthLogout creates a new http.Handler for the auth logout operation
func NewAuthLogout(ctx *middleware.Context, handler AuthLogoutHandler) *AuthLogout {
	return &AuthLogout{Context: ctx, Handler: handler}
}

/*
	AuthLogout swagger:route POST /api/v1/auth/logout auth authLogout

# Logout the current user

Invalidates an authenticated user's session and cookie
*/
type AuthLogout struct {
	Context *middleware.Context
	Handler AuthLogoutHandler
}

func (o *AuthLogout) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAuthLogoutParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
