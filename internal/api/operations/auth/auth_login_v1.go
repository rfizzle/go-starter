// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/rfizzle/go-starter/internal/entity"
)

// AuthLoginV1HandlerFunc turns a function with the right signature into a auth login v1 handler
type AuthLoginV1HandlerFunc func(AuthLoginV1Params, entity.Entity) middleware.Responder

// Handle executing the request and returning a response
func (fn AuthLoginV1HandlerFunc) Handle(params AuthLoginV1Params, principal entity.Entity) middleware.Responder {
	return fn(params, principal)
}

// AuthLoginV1Handler interface for that can handle valid auth login v1 params
type AuthLoginV1Handler interface {
	Handle(AuthLoginV1Params, entity.Entity) middleware.Responder
}

// NewAuthLoginV1 creates a new http.Handler for the auth login v1 operation
func NewAuthLoginV1(ctx *middleware.Context, handler AuthLoginV1Handler) *AuthLoginV1 {
	return &AuthLoginV1{Context: ctx, Handler: handler}
}

/*
	AuthLoginV1 swagger:route POST /v1/auth/login auth authLoginV1

# Login a user

Authenticates a user from a username and password and returns a JWT in the response and inside a
signed cookie.
*/
type AuthLoginV1 struct {
	Context *middleware.Context
	Handler AuthLoginV1Handler
}

func (o *AuthLoginV1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAuthLoginV1Params()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal entity.Entity
	if uprinc != nil {
		principal = uprinc.(entity.Entity) // this is really a entity.Entity, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
